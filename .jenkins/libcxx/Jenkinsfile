def azureEnvironment(String task) {
    node("nonSGX") {
        cleanWs()
        checkout scm
        def azure_image = docker.build("oetools-deploy", ".jenkins/libcxx" )
        azure_image.inside {
            withCredentials([usernamePassword(credentialsId: 'SERVICE_PRINCIPAL_OSTCLAB',
                                              passwordVariable: 'SERVICE_PRINCIPAL_PASSWORD',
                                              usernameVariable: 'SERVICE_PRINCIPAL_ID'),
                             string(credentialsId: 'OSCTLabSubID', variable: 'SUBSCRIPTION_ID'),
                             string(credentialsId: 'TenantID', variable: 'TENANT_ID')]) {
                dir('.jenkins/libcxx') {
                    withEnv(["AZURE_CONFIG_DIR=${WORKSPACE}/.jenkins/libcxx"]) {
                        sh "az login --service-principal -u ${SERVICE_PRINCIPAL_ID} -p ${SERVICE_PRINCIPAL_PASSWORD} --tenant ${TENANT_ID}"
                        sh "az account set --subscription ${SUBSCRIPTION_ID}"
                        sh """${task}"""
                    }
                }
            }
        }
    }
}

def deleteRG() {
    stage("Deleting Resource group oe-libcxx-${BUILD_NUMBER}") {
        azureEnvironment("az group delete --name oe-libcxx-${BUILD_NUMBER} --yes --no-wait")
    }
}

def ACCDeployVM(String version) {
    return {
        stage("Deploy ${version}") {
            azureEnvironment("""SSH_PUB_KEY="\$(az keyvault secret show --vault-name oe-ci-test-kv --name id-rsa-oe-test-pub | jq -r .value | base64 -d)"
                                sed -i "/\"keyData\":/c \"keyData\": \"\${SSH_PUB_KEY}\"" ${version}.json
                                oe-engine generate --api-model ${version}.json
                                az group create --name "oe-libcxx-${BUILD_NUMBER}" --location eastus
                                az group deployment create -n ${version}.json -g "oe-libcxx-${BUILD_NUMBER}" --template-file _output/azuredeploy.json --parameters @_output/azuredeploy.parameters.json
                                """)
        }
    }
}

def testVersions = ["ubuntu-16.04", "ubuntu-18.04"]

def stepsForParallel = testVersions.collectEntries { version ->
    ["Deploying  ${version}" : ACCDeployVM(version)]
}

try {
  parallel stepsForParallel
} finally {
  deleteRG()
}
