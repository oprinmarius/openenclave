// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

OECI_LIB_VERSION = env.OECI_LIB_VERSION ?: "master"
oe = library("OpenEnclaveCommon@${OECI_LIB_VERSION}").jenkins.common.Openenclave.new()

GLOBAL_TIMEOUT_MINUTES = 240
CTEST_TIMEOUT_SECONDS = 480
GLOBAL_ERROR = null

REPOSITORY_NAME = env.REPOSITORY_NAME ?: "openenclave/openenclave"
BRANCH_NAME = env.BRANCH_NAME ?: "master"
DOCKER_TAG = env.DOCKER_TAG ?: "latest"
FULL_TEST_SUITE = env.FULL_TEST_SUITE ?: false

AGENTS_LABELS = [
    "acc-ubuntu-16.04": env.UBUNTU_1604_CUSTOM_LABEL ?: "ACC-1604",
    "acc-ubuntu-18.04": env.UBUNTU_1804_CUSTOM_LABEL ?: "ACC-1804",
    "ubuntu-nonsgx":    env.UBUNTU_NONSGX_CUSTOM_LABEL ?: "nonSGX",
    "acc-rhel-8":       env.RHEL_8_CUSTOM_LABEL ?: "ACC-RHEL-8",
    "acc-win2016":      env.WINDOWS_2016_CUSTOM_LABEL ?: "SGX-Windows-2016",
    "acc-win2016-dcap": env.WINDOWS_2016_DCAP_CUSTOM_LABEL ?: "SGXFLC-Windows-2016-DCAP",
    "acc-win2019":      env.WINDOWS_2019_CUSTOM_LABEL ?: "SGX-Windows-2019",
    "acc-win2019-dcap": env.WINDOWS_2019_DCAP_CUSTOM_LABEL ?: "SGXFLC-Windows-2019-DCAP",
    "windows-nonsgx":   env.WINDOWS_NONSGX_CUSTOM_LABEL ?: "nonSGX-Windows"
]

properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '90',
                                      artifactNumToKeepStr: '180',
                                      daysToKeepStr: '90',
                                      numToKeepStr: '180')),
            [$class: 'JobRestrictionProperty']])

def getBlueOceanLink(obj, jobName) {
  def buildNumber

  if(obj instanceof Exception) {
    obj.toString().split(" ").each {
      if(it.contains("#")) {
        buildNumber = it.substring(1)
      }
    }
  } else if(obj instanceof org.jenkinsci.plugins.workflow.support.steps.build.RunWrapper) {
    buildNumber = obj.getNumber()
  } else {
    return "Can not determine Blue Ocean link!!!"
  }

  return "For detailed information see: ${JENKINS_URL}/blue/organizations/jenkins/${jobName}/detail/${jobName}/${buildNumber}/pipeline"
}

// Wrapper:
def linkBuild(job, parameters) {
    def buildInfo
    try {
        buildInfo = build(job: job, parameters: parameters, wait: true, propagate: true)
        println buildInfo
    } catch (Exception e) {
        println getBlueOceanLink(e, job)
        throw e
    }
    println getBlueOceanLink(buildInfo, job)
}


try {
    oe.emailJobStatus('STARTED')
    stage("Triggering Pipeline Jobs") {
        parallel (
          "Agnostic Linux" : {
              linkBuild('/pipelines/Agnostic-Linux',
                        [string(name: 'REPOSITORY_NAME', value: REPOSITORY_NAME),
                         string(name: 'BRANCH_NAME', value: BRANCH_NAME),
                         string(name: 'DOCKER_TAG', value: DOCKER_TAG),
                         string(name: 'UBUNTU_NONSGX_CUSTOM_LABEL', value: AGENTS_LABELS["ubuntu-nonsgx"]),
                         string(name: 'OECI_LIB_VERSION', value: OECI_LIB_VERSION),
                         booleanParam(name: 'FULL_TEST_SUITE',value: FULL_TEST_SUITE)]
                        )
           },
           "Azure Linux" : {
               linkBuild('/pipelines/Azure-Linux',
                         [string(name: 'REPOSITORY_NAME', value: REPOSITORY_NAME),
                          string(name: 'BRANCH_NAME', value: BRANCH_NAME),
                          string(name: 'DOCKER_TAG', value: DOCKER_TAG),
                          string(name: 'UBUNTU_1604_CUSTOM_LABEL', value: AGENTS_LABELS["acc-ubuntu-16.04"]),
                          string(name: 'UBUNTU_1804_CUSTOM_LABEL', value: AGENTS_LABELS["acc-ubuntu-18.04"]),
                          string(name: 'UBUNTU_NONSGX_CUSTOM_LABEL', value: AGENTS_LABELS["ubuntu-nonsgx"]),
                          string(name: 'RHEL_8_CUSTOM_LABEL', value: AGENTS_LABELS["acc-rhel-8"]),
                          string(name: 'WINDOWS_NONSGX_CUSTOM_LABEL', value: AGENTS_LABELS["windows-nonsgx"]),
                          string(name: 'OECI_LIB_VERSION', value: OECI_LIB_VERSION),
                          booleanParam(name: 'FULL_TEST_SUITE',value: FULL_TEST_SUITE)]
                        )
           },
           "Azure Windows" : {
               linkBuild('/pipelines/Azure-Windows',
                         [string(name: 'REPOSITORY_NAME', value: REPOSITORY_NAME),
                          string(name: 'BRANCH_NAME', value: BRANCH_NAME),
                          string(name: 'DOCKER_TAG', value: DOCKER_TAG),
                          string(name: 'UBUNTU_NONSGX_CUSTOM_LABEL', value: AGENTS_LABELS["ubuntu-nonsgx"]),
                          string(name: 'WINDOWS_2016_CUSTOM_LABEL', value: AGENTS_LABELS["acc-win2016"]),
                          string(name: 'WINDOWS_2016_DCAP_CUSTOM_LABEL', value: AGENTS_LABELS["acc-win2016-dcap"]),
                          string(name: 'WINDOWS_2019_CUSTOM_LABEL', value: AGENTS_LABELS["acc-win2019"]),
                          string(name: 'WINDOWS_2019_DCAP_CUSTOM_LABEL', value: AGENTS_LABELS["acc-win2019-dcap"]),
                          string(name: 'OECI_LIB_VERSION', value: OECI_LIB_VERSION),
                          booleanParam(name: 'FULL_TEST_SUITE',value: FULL_TEST_SUITE)]
                        )
           }
        )
    }
} catch(Exception e) {
    println "Caught global pipeline exception :" + e
    GLOBAL_ERROR = e
    throw e
} finally {
    currentBuild.result = (GLOBAL_ERROR != null) ? 'FAILURE' : "SUCCESS"
    oe.emailJobStatus(currentBuild.result)
}
