@Library("OpenEnclaveCommon") _
oe = new jenkins.common.Openenclave()

def buildDockerImages() {
    node("nonSGX") {
        stage("Build Ubuntu1604 Docker Image") {
            oetools1604 = oe.dockerImage("oetools:16.04", ".jenkins/Dockerfile", "--build-arg ubuntu_version=16.04")
        }
        stage("Build Ubuntu1804 Docker Image") {
            oetools1804 = oe.dockerImage("oetools:18.04", ".jenkins/Dockerfile", "--build-arg ubuntu_version=18.04")
        }
    }
}

def oetoolsimage(String version, String compiler, String task, String runArgs="") {
    if (version == "16.04") {
        oetools1604.inside(runArgs) {
            dir("${WORKSPACE}/build") {
                oe.Run(compiler, task)
            }
        }
    }
    else if (version == "18.04") {
        oetools1804.inside(runArgs) {
            dir("${WORKSPACE}/build") {
                oe.Run(compiler, task)
            }
        }
    }
    else {
       error('Unsupported version , aborting build')
    }
}

def ACCTest(String label, String compiler, String build_type) {
    stage("${label} ${compiler} SGX1FLC ${build_type}") {
        node("${label}") {
            def task = """
                       cmake ${WORKSPACE} -G Ninja -DCMAKE_BUILD_TYPE=${build_type} -Wdev
                       ninja -v
                       ctest --output-on-failure
                       """
            oe.Run(compiler, task)
        }
    }
}

def ACCGNUTest() {
    stage("ACC1804 GNU gcc SGX1FLC") {
        node("ACC-1804") {
            def task = """
                       cmake ${WORKSPACE} -DUSE_LIBSGX=ON
                       make
                       ctest --output-on-failure
                       """
            oe.Run("gcc", task)
        }
    }
}

def simulationTest(String version, String platform_mode, String build_type) {
    def use_libsgx = "OFF"
    if (platform_mode == "SGX1FLC") {
        use_libsgx = "ON"
    }
    stage("Sim clang-7 Ubuntu${version} ${platform_mode} ${build_type}") {
        node("nonSGX") {
            withEnv(["OE_SIMULATION=1"]) {
                def task = """
                           cmake ${WORKSPACE} -G Ninja -DCMAKE_BUILD_TYPE=${build_type} -DUSE_LIBSGX=${use_libsgx} -Wdev
                           ninja -v
                           ctest --output-on-failure
                           """
                oetoolsimage(version, "clang-7", task)
            }
        }
    }
}

def ACCContainerTest(String label, String version) {
    stage("${label} Container RelWithDebInfo") {
        node("${label}") {
            def task = """
                       cmake ${WORKSPACE} -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -Wdev
                       ninja -v
                       ctest --output-on-failure
                       """
            oetoolsimage(version, "clang-7", task)
        }
    }
}

def checkDevFlows(String version) {
    stage('Default compiler') {
        node("nonSGX") {
            oe.dockerImage("oetools:${version}", ".jenkins/Dockerfile.scripts", "--build-arg ubuntu_version=${version}").inside {
                timeout(30) {
                    dir('build') {
                        sh """
                           cmake ${WORKSPACE} -G Ninja -DUSE_LIBSGX=OFF -Wdev --warn-uninitialized --warn-unused-vars
                           ninja -v
                           """
                    }
                }
            }
        }
    }
}

def checkCI() {
    stage('Check CI') {
        node("nonSGX") {
            oe.dockerImage("oetools:18.04", ".jenkins/Dockerfile", "--build-arg ubuntu_version=18.04").inside {
                timeout(10) {
                    sh './scripts/check-ci'
                }
            }
        }
    }
}

def win2016LinuxElfBuild(String version, String compiler, String build_type) {
    stage("Ubuntu ${version} SGX1 ${compiler} ${build_type}}") {
        node("nonSGX") {
            def task = """
                       cmake ${WORKSPACE} -G Ninja -DCMAKE_BUILD_TYPE=${build_type} -DUSE_DEBUG_MALLOC=OFF -Wdev
                       ninja -v
                       """
            oetoolsimage(version, compiler, task)
            stash includes: 'build/tests/**', name: "linux-${compiler}-${build_type}-${version}-${BUILD_NUMBER}"
        }
    }
    stage("Windows ${build_type}") {
        node('SGXFLC-Windows') {
            cleanWs()
            checkout scm
            unstash "linux-${compiler}-${build_type}-${version}-${BUILD_NUMBER}"
            bat 'move build linuxbin'
            dir('build') {
              bat """
                  vcvars64.bat x64 && \
                  cmake.exe ${WORKSPACE} -G \"Visual Studio 15 2017 Win64\" -DADD_WINDOWS_ENCLAVE_TESTS=ON -DBUILD_ENCLAVES=OFF -DCMAKE_BUILD_TYPE=${build_type} -DLINUX_BIN_DIR=${WORKSPACE}\\linuxbin\\tests -Wdev && \
                  msbuild ALL_BUILD.vcxproj -p:Configuration=${build_type} && \
                  ctest.exe -V -C ${build_type}
                  """
            }
       }
    }
}

def win2016CrossCompile(String build_type) {
    stage("Windows ${build_type}") {
        node('SGXFLC-Windows') {
            cleanWs()
            checkout scm
            dir("build/X64-${build_type}") {
              bat """
                  vcvars64.bat x64 && \
                  cmake.exe ${WORKSPACE} -G Ninja -DCMAKE_BUILD_TYPE=${build_type} -DBUILD_ENCLAVES=ON -Wdev && \
                  ninja.exe && \
                  ctest.exe -V -C ${build_type}
                  """
            }
       }
    }
}


properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '90',
                                      artifactNumToKeepStr: '180',
                                      daysToKeepStr: '90',
                                      numToKeepStr: '180')),
            [$class: 'JobRestrictionProperty']])


buildDockerImages()
parallel "ACC1604-1 Container RelWithDebInfo" :                   { ACCContainerTest('ACC-1604-1', '16.04') },
         "ACC1604-2 Container RelWithDebInfo" :                   { ACCContainerTest('ACC-1604-2', '16.04') },
         "ACC1604-3 Container RelWithDebInfo" :                   { ACCContainerTest('ACC-1604-3', '16.04') },
         "ACC1804-1 Container RelWithDebInfo" :                   { ACCContainerTest('ACC-1804-1', '18.04') },
         "ACC1804-2 Container RelWithDebInfo" :                   { ACCContainerTest('ACC-1804-2', '18.04') },
         "ACC1804-3 Container RelWithDebInfo" :                   { ACCContainerTest('ACC-1804-3', '18.04') },
         "oe-ubun1604-2 Container RelWithDebInfo" :                   { ACCContainerTest('oe-ubun1604-3', '18.04') },
         "oe-ubun1604-3 Container RelWithDebInfo" :                   { ACCContainerTest('oe-ubun1604-3', '18.04') }
