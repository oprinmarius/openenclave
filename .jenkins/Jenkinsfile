def ACCTest(String label, String compiler, String build_type) {
    def c_compiler = "clang-7"
    def cpp_compiler = "clang++-7"
    stage("${label} ${compiler} SGX1FLC ${build_type}") {
        node("${label}") {
            cleanWs()
            checkout scm

            timeout(15) {
                dir('build') {
                    if (compiler == "gcc") {
                        c_compiler = "gcc"
                        cpp_compiler = "g++"
                    }
                    withEnv(["CC=${c_compiler}","CXX=${cpp_compiler}"]) {
                        sh """
                        cmake ${WORKSPACE} -DCMAKE_BUILD_TYPE=${build_type}
                        make
                        ctest --output-on-failure
                        """
                    }
                }
            }

        }
    }
}

def simulationTest(String version, String platform_mode, String build_type) {
    def use_libsgx = "OFF"
    if (platform_mode == "SGX1FLC") {
        use_libsgx = "ON"
    }
    stage("Sim clang-7 Ubuntu${version} ${platform_mode} ${build_type}") {
        node {
            cleanWs()
            checkout scm

            def oetoolsSim = docker.build("oetools-simulation-${version}", "--build-arg ubuntu_version=${version} -f .jenkins/Dockerfile .")
            oetoolsSim.inside {
                timeout(15) {
                    dir('build') {
                        withEnv(["CC=clang-7","CXX=clang++-7","OE_SIMULATION=1"]) {
                            sh """
                            cmake ${WORKSPACE} -DCMAKE_BUILD_TYPE=${build_type} -DUSE_LIBSGX=${use_libsgx}
                            make
                            ctest --output-on-failure
                            """
                        }
                    }
                }
            }
        }
    }
}

def ACCContainerTest(String label, String version) {
    stage("${label} Container RelWithDebInfo") {
        node("${label}") {
            cleanWs()
            checkout scm

            def oetoolsContainer = docker.build("oetools-containertest-${version}", "--build-arg ubuntu_version=${version} -f .jenkins/Dockerfile .")
            oetoolsContainer.inside('--device /dev/sgx:/dev/sgx') {
                timeout(15) {
                    dir('build') {
                        withEnv(["CC=clang-7","CXX=clang++-7"]) {
                            sh """
                            cmake ${WORKSPACE} -DCMAKE_BUILD_TYPE=RelWithDebInfo
                            make
                            ctest --output-on-failure
                            """
                        }
                    }
                }
            }
        }
    }
}

def checkDevFlows(String version) {
    stage('Check dev flows') {
        node {
            cleanWs()
            checkout scm

            def oetoolsCheck = docker.build("oetools-check-${version}", "--build-arg ubuntu_version=${version} -f .jenkins/Dockerfile .")
            oetoolsCheck.inside {
                timeout(2) {
                    sh './scripts/check-ci'
                }
            }
        }
    }
    stage('Default compiler') {
        // This stage verifies developer flows after running ansible playbooks to bootstrap a machine.
        node {
            cleanWs()
            checkout scm

            def buildImage = docker.build("oetools-base-${version}", "--build-arg ubuntu_version=${version} -f .jenkins/Dockerfile.scripts .")

            buildImage.inside {
                timeout(15) {
                    // This is run to test that it works with the dependencies
                    // installed by our install-prereqs ansible playbook.

                    dir('build') {
                        sh '''
                        cmake ${WORKSPACE} -DUSE_LIBSGX=OFF
                        make
                        '''
                        // Note that `make package` is not expected to work
                        // without extra configuration.
                    }
                }
            }
        }
    }
}

def win2016LinuxElfBuild(String version, String build_type) {
    stage("Ubuntu ${version} SGX1 ${build_type}}") {
        node {
            cleanWs()
            checkout scm
            def oetoolsWincp = docker.build("oetools-wincp-${version}", "--build-arg ubuntu_version=${version} -f .jenkins/Dockerfile .")
            oetoolsWincp.inside {
                timeout(15) {
                    dir('build') {
                        withEnv(["CC=clang-7","CXX=clang++-7"]) {
                            sh """
                            cmake ${WORKSPACE} -DCMAKE_BUILD_TYPE=${build_type} -DUSE_DEBUG_MALLOC=OFF
                            make
                            """
                        }
                    }
                    stash includes: 'build/tests/**', name: "linux${build_type}${version}"
                }
            }
        }
    }
    stage("Windows ${build_type}") {
        node('SGXFLC-Windows') {
            cleanWs()
            checkout scm
            unstash "linux${build_type}${version}"
            bat 'move build linuxbin'
            dir('build') {
                bat """vcvars64.bat x64 && \
                       cmake.exe ${WORKSPACE} -G \"Visual Studio 15 2017 Win64\" -DADD_WINDOWS_ENCLAVE_TESTS=ON -DBUILD_ENCLAVES=OFF -DCMAKE_BUILD_TYPE=${build_type} -DLINUX_BIN_DIR=${WORKSPACE}\\linuxbin\\tests && \
                       msbuild ALL_BUILD.vcxproj -p:Configuration=${build_type} && \
                       ctest.exe -C ${build_type} --output-on-failure"""
            }
       }
    }
}

def win2016CrossCompile(String build_type) {
    node('SGXFLC-Windows') {
        stage("Windows ${build_type}") {
            cleanWs()
            checkout scm
            dir("build/X64-${build_type}") {
                bat """vcvars64.bat x64 && \
                       cmake.exe ${WORKSPACE} -G Ninja -DCMAKE_BUILD_TYPE=${build_type} -DBUILD_ENCLAVES=ON && \
                       ninja.exe && \
                       ctest.exe -C ${build_type} --output-on-failure"""
            }
       }
       stage("Windows ${build_type} Simulation") {
           withEnv(["OE_SIMULATION=1"]){
               dir("build/X64-${build_type}"){
                   bat """
                       vcvars64.bat x64 && \
                       cmake.exe ${WORKSPACE} -G Ninja -DCMAKE_BUILD_TYPE=${build_type} -DBUILD_ENCLAVES=ON -DWIN32_SIMULATION=ON && \
                       ctest.exe -C ${build_type} --output-on-failure
                       """
               }
           }
       }
    }
}


parallel "Win2016 Debug Cross Compile" :                { win2016CrossCompile('Debug') },
         "Win2016 Release Cross Compile" :              { win2016CrossCompile('Release') }
