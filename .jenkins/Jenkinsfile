// oetools-image:tag  Docker image from OE Jenkins Registry
OETOOLS_REPO = "https://oejenkinscidockerregistry.azurecr.io"
OETOOLS_REPO_CREDENTIAL_ID = "oejenkinscidockerregistry"
OETOOLS_IMAGE = "oetools-azure:1.9"


def PowerShellWrapper(psCmd) {
    psCmd = psCmd.replaceAll("\r", "").replaceAll("\n", "")
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"\$ErrorActionPreference='Stop';[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}

def ACCTest(String label, String compiler, String unit, String suite) {
    stage("$label $compiler $unit $suite") {
        node("$label") {
            cleanWs()
            checkout scm

            timeout(15) {
                sh "./scripts/test-build-config -p $unit -b $suite --compiler=$compiler --disable_sim"
            }

        }
    }
}

def simulationTest(String compiler, String unit, String suite ) {
    stage("Sim $compiler $unit $suite") {
        node {
            cleanWs()
            checkout scm

            docker.withRegistry(OETOOLS_REPO, OETOOLS_REPO_CREDENTIAL_ID) {
                docker.image(OETOOLS_IMAGE).inside {
                    timeout(15) {
                        sh "./scripts/test-build-config -p $unit -b $suite --compiler=$compiler"
                    }
                }
            }
        }
    }
}

def ACCContainerTest(String label) {
    stage("$label Container RelWithDebInfo") {
        node("$label") {
            cleanWs()
            checkout scm

            docker.withRegistry(OETOOLS_REPO, OETOOLS_REPO_CREDENTIAL_ID) {
                docker.image(OETOOLS_IMAGE).inside('--privileged -v /dev/sgx:/dev/sgx') {
                    timeout(15) {
                        sh './scripts/test-build-config -p SGX1FLC -b RelWithDebInfo --disable_sim'
                    }
                }
            }
        }
    }
}

def checkPreCommitRequirements() {
    stage('Check pre-commit requirements') {
        node {
            cleanWs()
            checkout scm

            docker.withRegistry(OETOOLS_REPO, OETOOLS_REPO_CREDENTIAL_ID) {
                docker.image(OETOOLS_IMAGE).inside {
                    timeout(2) {
                        sh './scripts/check-ci'
                    }
                }
            }
        }
    }
    stage('Sim default compiler') {
        // This particular test asserts that everything (at least
        // for simulation) can be built after using our
        // install-prereqs ansible playbook to to bootstrap a machine.
        node {
            cleanWs()
            checkout scm

            def buildImage = docker.build("oetools-base", '-f .jenkins/Dockerfile.scripts .')

            buildImage.inside {
                timeout(15) {
                    // This is run to test that it works with the dependencies
                    // installed by our install-prereqs ansible playbook.
                    sh './scripts/check-ci'
                    // installed by our install-prereqs script.

                    dir('build') {
                        sh '''
                        cmake .. -DUSE_LIBSGX=OFF
                        make
                        OE_SIMULATION=1 ctest --verbose --output-on-failure
                    '''
                        // Note that `make package` is not expected to work
                        // without extra configuration.
                    }
                }
            }
        }
    }
}

def win2016DebugCrossPlatform() {
    stage('Linux SGX1 Debug') {
        node {
            cleanWs()
            checkout scm
            docker.withRegistry(OETOOLS_REPO, OETOOLS_REPO_CREDENTIAL_ID) {
                docker.image(OETOOLS_IMAGE).inside {
                    timeout(15) {
                        sh './scripts/test-build-config -p SGX1FLC -b Debug --compiler=clang-7'
                        stash includes: 'build/tests/**', name: 'linuxdebug'
                    }
                }
            }
        }
    }
    stage('Windows Debug') {
        node('SGXFLC-Windows') {
            cleanWs()
            checkout scm
            unstash 'linuxdebug'
            PowerShellWrapper('mv build linuxbin')
            PowerShellWrapper('./scripts/test-build-config.ps1 -add_windows_enclave_tests -linux_bin_dir $ENV:WORKSPACE/linuxbin/tests -build_type Debug')
       }
    }
}

def win2016ReleaseCrossPlatform() {
    stage('Linux SGX1 Release') {
        node {
            cleanWs()
            checkout scm
            docker.withRegistry(OETOOLS_REPO, OETOOLS_REPO_CREDENTIAL_ID) {
                docker.image(OETOOLS_IMAGE).inside {
                    timeout(15) {
                        sh './scripts/test-build-config -p SGX1FLC -b Release --compiler=clang-7'
                        stash includes: 'build/tests/**', name: 'linuxrelease'
                    }
                }
            }
        }
    }
    stage('Windows Release') {
        node('SGXFLC-Windows') {
            cleanWs()
            checkout scm
            unstash 'linuxrelease'
            PowerShellWrapper('mv build linuxbin')
            PowerShellWrapper('./scripts/test-build-config.ps1 -add_windows_enclave_tests -linux_bin_dir $ENV:WORKSPACE/linuxbin/tests -build_type Release')
        }
    }
}

def win2016Debug() {
    stage('Windows Debug') {
        node('SGXFLC-Windows') {
            cleanWs()
            checkout scm
            PowerShellWrapper('./scripts/test-build-config.ps1 -add_windows_enclave_tests -linux_bin_dir $ENV:WORKSPACE/linuxbin/tests -build_type Debug -build_enclaves')
       }
    }
}

def win2016Release() {
    stage('Windows Release') {
        node('SGXFLC-Windows') {
            cleanWs()
            checkout scm
            PowerShellWrapper('./scripts/test-build-config.ps1 -add_windows_enclave_tests -linux_bin_dir $ENV:WORKSPACE/linuxbin/tests -build_type Release -build_enclaves')
        }
    }
}


def docker_build_test() {
    stage('Sim default compiler') {
        // This particular test asserts that everything (at least
        // for simulation) can be built after using our
        // install-prereqs ansible playbook to to bootstrap a machine.
        node {
            cleanWs()
            checkout scm

            def buildImage = docker.build("oetools-test", '-f .jenkins/Dockerfile.scripts .')

            buildImage.inside {
                timeout(15) {
                    // This is run to test that it works with the dependencies
                    // installed by our install-prereqs ansible playbook.
                    sh './scripts/check-ci'
                    // installed by our install-prereqs script.

                    dir('build') {
                        sh '''
                        cmake .. -DUSE_LIBSGX=OFF
                        make
                    '''
                        // Note that `make package` is not expected to work
                        // without extra configuration.
                    }
                }
            }
        }
    }
}

def cache_testing() {
    node('ACC-1804') {
        cleanWs( )
        buildImage.inside { 
            sh './scripts/check-ci'
        }
    }
}

docker_build_test()
cache_testing()
